---
description: 
globs: 
alwaysApply: true
---
# Terminator Development Guide

## Architecture Principles

### Rust Core + Language Bindings
- **Core Logic**: All automation logic lives in the Rust crate at **[terminator/src/](mdc:terminator/src)**
- **Language Bindings**: Python and Node.js bindings wrap the Rust core
- **FFI Pattern**: Use safe FFI patterns for cross-language communication

### Platform Abstraction
- Use conditional compilation for platform-specific code
- Windows: UIAutomation APIs
- macOS: Accessibility framework
- Abstract common patterns into traits

## Code Organization

### Workspace Structure
The project uses Cargo workspace defined in **[Cargo.toml](mdc:Cargo.toml)**:
- `terminator/` - Core library
- `bindings/python/` - Python wrapper
- `bindings/nodejs/` - Node.js wrapper  
- `terminator-workflow-recorder/` - Recording tool
- `examples/` - Usage examples

### Dependency Management
- Use workspace dependencies defined in root **[Cargo.toml](mdc:Cargo.toml)**
- Platform-specific dependencies should use cfg conditions
- Keep external dependencies minimal and well-justified

## API Design Patterns

### Fluent Interface
Design APIs to be chainable and intuitive:
```rust
desktop.locator("name:Button").click().wait_for_enabled()
```

### Error Handling
- Use `anyhow::Result` for public APIs
- Use `thiserror` for custom error types
- Provide clear error messages for automation failures

### Async by Default
- All automation operations should be async
- Use `tokio` runtime consistently
- Provide sync wrappers only when necessary

## Testing Strategy

### Integration Tests
- Test against real applications when possible
- Use Windows built-in apps (Calculator, Notepad) for CI
- Mock platform APIs for unit tests

### Examples as Tests
- Examples in **[examples/](mdc:examples)** serve as integration tests
- Keep examples simple and well-documented
- Each example should demonstrate one core concept

## Performance Considerations

### Caching
- Cache UI element references when safe
- Invalidate caches on UI changes
- Measure and optimize common operations

### Compiled Workflows
- Support pre-compiled automation workflows
- Optimize for 80ms UI scans as mentioned in **[README.md](mdc:README.md)**
- Profile critical paths regularly

## Documentation Standards

### Code Comments
- Document public APIs thoroughly
- Explain platform-specific behavior
- Include usage examples in doc comments

### README Updates
Keep **[README.md](mdc:README.md)** current with:
- Installation instructions
- Quick start examples
- Links to full documentation

